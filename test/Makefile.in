## Variables set by configure 
OPENCV_DIRECTORY  = @OPENCVDIR@
XGBOOST_DIRECTORY = @XGBOOSTDIR@
TENSORFLOW_DIR    = @TENSORFLOWDIR@

CXX           = @CXX@
LD            = @CXX@
CXXFLAGS      = @CXXFLAGS@
LDFLAGS       = @LDFLAGS@
PREFIX        = @prefix@
LDCONFIG      = @LDCONFIG@
LIBSUFFIX     = @LIBSUFFIX@
PYTHONCFG     = @PYTHONCFG@
SCRAMNUMPYCFG = @SCRAMNUMPYCFG@
TMVALIB       = @TMVALIB@

#manual configuration
IDIR       = $(CMSSW_BASE)/src/NTupleReader/include/
WDIR       = .
ODIR       = obj
SDIR       = $(CMSSW_BASE)/src/NTupleReader/src/

CXX        = g++

CXXFLAGS += -I. -std=c++0x -I$(CMSSW_BASE)/src/ -isystem$(LHAPDF_DATA_PATH)/../../include -I$(CMSSW_RELEASE_BASE)/src 
#CXXFLAGS += -I$(shell scram tool info fastjet | grep '^INCLUDE' | sed 's/INCLUDE=//')
#CXXFLAGS += -I$(shell scram tool info boost | grep '^INCLUDE' | sed 's/INCLUDE=//')
## Optimization flag
CXXFLAGS += -g -fPIC
## Enable the maximun warning
#CXXFLAGS += -Wall -Wextra -Weffc++ -g

## Include ROOT
CXXFLAGS  += $(shell root-config --cflags)

CXXDEPFLAGS = -MMD -MP

LD         = g++
LDFLAGS    =

#Necessary includes and libraries, the order matters here!

## Include ROOT
INCLUDESDIRS += $(shell root-config --cflags)
# ROOT libraries
LIBS         += $(shell root-config --glibs)

# TMVA library
ifdef TMVALIB
	CXXFLAGS += -DSHOTTOPTAGGER_DO_TMVA
	LIBS     += $(TMVALIB)
endif

#python includes and libraries
ifdef PYTHONCFG
	INCLUDESDIRS  += $(shell $(PYTHONCFG) --includes)

	CXXFLAGS += -DDOTENSORFLOWPYBIND
	LIBS     += -L$(shell $(PYTHONCFG) --prefix)/lib $(shell $(PYTHONCFG) --libs)
endif

#scram specific numpy c-api
ifdef SCRAMNUMPYCFG
	INCLUDESDIRS += -I$(SCRAMNUMPYCFG)/c-api/core/include
endif

# openCV includes and libraries
ifdef OPENCV_DIRECTORY
	INCLUDESDIRS  += -I$(OPENCV_DIRECTORY)/include/ -I$(OPENCV_DIRECTORY)/modules/core/include 
	INCLUDESDIRS  += -I$(OPENCV_DIRECTORY)/modules/video/include -I$(OPENCV_DIRECTORY)/modules/objdetect/include 
	INCLUDESDIRS  += -I$(OPENCV_DIRECTORY)/modules/ml/include/ -I$(OPENCV_DIRECTORY)/modules/photo/include/ 
	INCLUDESDIRS  += -I$(OPENCV_DIRECTORY)/modules/imgproc/include/
	INCLUDESDIRS  += -I$(OPENCV_DIRECTORY)

	CXXFLAGS += -DSHOTTOPTAGGER_DO_OPENCV
	LIBS     += -L$(OPENCV_DIRECTORY)/lib -lopencv_ml -lopencv_core
endif

# xgboost includes and libraries
ifdef XGBOOST_DIRECTORY
	INCLUDESDIRS  += -I$(XGBOOST_DIRECTORY) -I$(XGBOOST_DIRECTORY)/rabit/include

	CXXFLAGS += -DDOXGBOOST
	LIBS     += -L$(XGBOOST_DIRECTORY)/lib -lxgboost
endif

# tensorflow includes and libraries
ifdef TENSORFLOW_DIR
	INCLUDESDIRS  += -I$(TENSORFLOW_DIR)/include

	CXXFLAGS += -DDOTENSORFLOW
	LIBS     += -L$(TENSORFLOW_DIR)/lib -ltensorflow
endif

LHAPDFLIB  = -L$(LHAPDF_DATA_PATH)/../../lib -lLHAPDF

#FILES = $(wildcard $(SDIR)/*.cc)
#OBJS := $(FILES:$(SDIR)/%.cc=$(ODIR)/%.o)

PROGRAMS = tupleReadTest

all: mkobj $(PROGRAMS)

mkobj:
	@mkdir -p $(ODIR)

# Link it all up
SRC_EXT = cpp c cc C
SRC_DIR = $(SDIR) $(WDIR)
INCLUDESDIRS += -I$(SDIR) -I$(IDIR) -I$(WDIR)
define compile_rule
$$(ODIR)/%.o : $1/%.$2
	$$(CXX) $$(CXXFLAGS) $$(CXXDEPFLAGS)  $$(INCLUDESDIRS) -o $$@ -c $$<
endef    
$(foreach DIR,$(SRC_DIR),$(foreach EXT,$(SRC_EXT),$(eval $(call compile_rule,$(DIR),$(EXT)))))

# Make executables
tupleReadTest: $(ODIR)/tupleReadTest.o $(ODIR)/NTupleReader.o
	$(LD) $^ $(LIBS) $(LHAPDFLIB) -o $@

clean:
	rm -rf $(ODIR)/*.a $(ODIR)/*.so $(ODIR)/*.o $(ODIR)/*.d $(PROGRAMS) core $(ODIR)

-include $(ODIR)/*.d
